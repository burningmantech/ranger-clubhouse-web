# Docs:
# https://help.github.com/en/articles/about-github-actions
# https://help.github.com/en/articles/configuring-a-workflow
# https://help.github.com/en/articles/workflow-syntax-for-github-actions


name: CI/CD

on: [push]


jobs:

  info:

    name: Workflow information
    runs-on: ubuntu-latest
    timeout-minutes: 1

    steps:

      - name: Print GitHub Context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "${GITHUB_CONTEXT}";

      - name: Print Job Context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "${JOB_CONTEXT}";

      - name: Print Steps Context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "${STEPS_CONTEXT}";

      - name: Print Runner Context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "${RUNNER_CONTEXT}";

      - name: Print Strategy Context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "${STRATEGY_CONTEXT}";

      - name: Print Matrix Context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "${MATRIX_CONTEXT}";


  docker:
    name: Build Docker image

    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:

      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Build Docker image
        run: ./bin/build;

      - name: Save Docker image
        run: |
          mkdir images;
          docker image save ranger-clubhouse-web:dev | gzip -6 > images/web.tgz;

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v1
        with:
          name: images
          path: images


  test-docker:

    name: Test Docker image

    needs: [docker]

    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:

      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Download Docker image artifact
        uses: actions/download-artifact@v1
        with:
          name: images

      - name: Load Docker image
        run: gzip --uncompress --stdout images/web.tgz | docker image load;

      - name: Test Docker image
        run: ./bin/test_docker;


  deploy-staging:
    name: Deploy code from master branch to the staging environment

    needs: [docker, test-docker]
    if: github.ref == 'refs/heads/master'

    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:

      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Download Docker image artifact
        uses: actions/download-artifact@v1
        with:
          name: images

      - name: Load Docker image
        run: gzip --uncompress --stdout images/web.tgz | docker image load;

      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.7'

      - name: Deploy to staging
        run: ./bin/deploy staging;
        env:
          # https://github.com/burningmantech/ranger-secret-clubhouse/settings/secrets
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_ECR_IMAGE_NAME: ${{ secrets.AWS_ECR_IMAGE_NAME }}
          AWS_ECS_CLUSTER_STAGING: rangers
          AWS_ECS_SERVICE_STAGING: ${{ secrets.AWS_ECS_SERVICE_STAGING }}
          NOTIFY_SMTP_HOST: ${{ secrets.NOTIFY_SMTP_HOST }}
          NOTIFY_SMTP_USER: ${{ secrets.NOTIFY_SMTP_USER }}
          NOTIFY_SMTP_PASSWORD: ${{ secrets.NOTIFY_SMTP_PASSWORD }}
          NOTIFY_EMAIL_RECIPIENT: ${{ secrets.NOTIFY_EMAIL_RECIPIENT }}
          NOTIFY_EMAIL_SENDER: ${{ secrets.NOTIFY_EMAIL_SENDER }}
          CI: true
          PROJECT_NAME: Ranger Secret Clubhouse Web Application
          REPOSITORY_ID: ${{ github.repository }}
          BUILD_NUMBER: 0
          BUILD_URL: https://github.com/burningmantech/ranger-secret-clubhouse/commit/${{ github.sha }}/checks
          COMMIT_ID: ${{ github.event.head_commit.id }}
          COMMIT_URL: ${{ github.event.head_commit.url }}
          COMMIT_AUTHOR_USER: ${{ github.event.head_commit.author.username }}
          COMMIT_AUTHOR_NAME: ${{ github.event.head_commit.author.name }}
          COMMIT_AUTHOR_EMAIL: ${{ github.event.head_commit.author.email }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
